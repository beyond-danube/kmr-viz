function createTable(id, name) {
    let parentDiv = document.getElementById('details-tables')

    let table = document.createElement('table')
    table.setAttribute('class', 'table table-striped table-hover table-fixed-head')
    parentDiv.appendChild(table)

    let head = document.createElement('thead')
    table.appendChild(head)

    let headTr = document.createElement('tr')
    headTr.setAttribute('class', 'table-header')
    head.appendChild(headTr)

    let headName = document.createElement('th')
    headName.setAttribute('scope', 'col-md-10')
    headName.innerText = name
    headTr.appendChild(headName)

    for (const voteOption in voteOptions) {
        let column = document.createElement('th')
        column.setAttribute('scope', 'col')
        column.setAttribute('class', 'rotate')
        column.innerHTML = voteOptionsEmoji[voteOption]

        headTr.appendChild(column)
    }

    let resultColumn = document.createElement('th')
    resultColumn.setAttribute('scope', 'col')
    resultColumn.setAttribute('class', 'rotate')
    resultColumn.innerHTML = 'üìë'
    headTr.appendChild(resultColumn)


    let tableBody = document.createElement('tbody')
    tableBody.setAttribute('id', id)
    table.appendChild(tableBody)
}

// function createMainHeader(headerValue) {
//     let parentDiv = document.getElementById('details-tables')

//     let container = document.createElement('div')
//     container.setAttribute('class', 'container')
//     parentDiv.appendChild(container)

//     let header = document.createElement('h2')
//     header.innerText = headerValue
//     container.appendChild(header)
// }

// function createSubHeader(headerValue) {
//     let parentDiv = document.getElementById('details-tables')

//     let container = document.createElement('div')
//     container.setAttribute('class', 'container')
//     parentDiv.appendChild(container)

//     let header = document.createElement('h4')
//     header.innerText = headerValue
//     container.appendChild(header)
// }

function addRows(tableId, datarows) {
    let table = document.getElementById(tableId)

    datarows.forEach(datarow => {

        let row = document.createElement("tr")

        appendRowItems(row, [ getResultTextWithLinks(datarow.GL_Text), datarow.YESCnt, datarow.NOCnt, datarow.UTRCnt, datarow.NGCnt, datarow.ABSCnt, datarow.RESULT === resultOptions.YES ? '‚úÖ' : '‚ùå' ])

        table.appendChild(row)
        
    })
}

function appendRowItems(element, values) {

    values.forEach(value => {
        let rowEntry = document.createElement("td")
        rowEntry.innerHTML = value

        element.appendChild(rowEntry)
    })
}

function getResultTextWithLinks(str) {
    const baseGoogleUrl = 'https://www.google.com/search?q='

    // We're trying to guess company by ¬´¬ª so that e.g. ¬´–§–ê–†–ú–ö–ê–ö¬ª is a company. 
    // We skip 1-character string in such quotation marks, since it mightbe building number, 
    // and all the sthings strating with ¬´–ø—Ä–æ¬ª since that might be document name, not company
    //
    // Example
    // –ü—Ä–æ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤, –ø–æ—Å–ª—É–≥, —è–∫—ñ –Ω–∞–¥–∞—é—Ç—å—Å—è –±–µ–∑–æ–ø–ª–∞—Ç–Ω–æ –†–∏—Ç—É–∞–ª—å–Ω–æ—é —Å–ª—É–∂–±–æ—é —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ 
    // –∫–æ–º—É–Ω–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ ¬´–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–±—ñ–Ω–∞—Ç –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤ –∫–æ–º—É–Ω–∞–ª—å–Ω–æ-–ø–æ–±—É—Ç–æ–≤–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è¬ª –≤–∏–∫–æ–Ω–∞–≤—á–æ–≥–æ 
    // –æ—Ä–≥–∞–Ω—É –ö–∏—ó–≤—Ä–∞–¥–∏ (–ö–∏—ó–≤—Å—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó –¥–µ—Ä–∂–∞–≤–Ω–æ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó) —Ç–∞ –†–∏—Ç—É–∞–ª—å–Ω–æ—é —Å–ª—É–∂–±–æ—é —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ–º—É–Ω–∞–ª—å–Ω–æ–≥–æ 
    // –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ ¬´–ö–∏—ó–≤—Å—å–∫–∏–π –∫—Ä–µ–º–∞—Ç–æ—Ä—ñ–π¬ª –≤–∏–∫–æ–Ω–∞–≤—á–æ–≥–æ –æ—Ä–≥–∞–Ω—É –ö–∏—ó–≤—Ä–∞–¥–∏ (–ö–∏—ó–≤—Å—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó –¥–µ—Ä–∂–∞–≤–Ω–æ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó) –ø—Ä–∏ 
    // –ø–æ—Ö–æ–≤–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –æ—Å—ñ–±, –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç–∞–º–∏ ¬´–≤¬ª —ñ ¬´–≥¬ª —á–∞—Å—Ç–∏–Ω–∏ –ø–µ—Ä—à–æ—ó —Å—Ç–∞—Ç—Ç—ñ 14 –ó–∞–∫–æ–Ω—É –£–∫—Ä–∞—ó–Ω–∏
    // ¬´–ü—Ä–æ –ø–æ—Ö–æ–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ—Ö–æ—Ä–æ–Ω–Ω—É —Å–ø—Ä–∞–≤—É¬ª. (–í—ñ–¥ 15.08.2022 ‚Ññ 08/231-988/–ü–†)
    const company = new RegExp(/\¬´(?!–ü—Ä–æ)(?!–ø—Ä–æ)[^¬ª*]{2,}\¬ª/g)

    const docId = new RegExp(/\([0-9]+\)/g)
    const docDate = new RegExp(/\(–í—ñ–¥ [0-9]*\.[0-9]*\.[0-9]*.‚Ññ.[0-9]*\/[0-9]*-[0-9]*\/–ü–†\)/g)

    function makeCompanyGoogleLinks(match) {
        return `<a href=${encodeURI(`${baseGoogleUrl}"${match.replace('¬ª', '').replace('¬´', '')}"`)} target="_blank">${match}</a>`
    }

    function makeDocsGoogleLinks(match) {
        let removedBrackets = match.substring(1, match.length - 1)
        let br1 = match.charAt(0)
        let br2 = match.charAt(match.length - 1)

        return `${br1}<a href=${encodeURI(`${baseGoogleUrl}"${removedBrackets}"`)} target="_blank">${removedBrackets}</a>${br2}`
    }

    return str.replace(company, makeCompanyGoogleLinks).replace(docId, makeDocsGoogleLinks).replace(docDate, makeDocsGoogleLinks)
}

function createThemeTables(votesByCategory) {
    for (const theme in themeToCategoryMap) {
        for (const item in themeToCategoryMap[theme]) {

            if(votesByCategory.hasOwnProperty(themeToCategoryMap[theme][item])) {
                createTable(themeToCategoryMap[theme][item], `${readableThemeMap[theme]}: ${themeToCategoryMap[theme][item]}`)

                try {
                    addRows(themeToCategoryMap[theme][item], votesByCategory[themeToCategoryMap[theme][item]])
                } catch (e) {
                    console.log(e)
                }
            }
        }
    }
}